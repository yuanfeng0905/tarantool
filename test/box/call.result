box.schema.user.grant('guest', 'read,write,execute', 'universe')
---
...
conn = require('net.box').connect(box.cfg.listen)
---
...
conn:ping()
---
- true
...
--
-- gh-291: IPROTO: call returns wrong tuple
--
function return_none() return end
---
...
conn:call("return_none")
---
...
conn:eval("return return_none()")
---
...
conn:call_16("return_none")
---
- []
...
function return_nil() return nil end
---
...
conn:call("return_nil")
---
- null
...
conn:eval("return return_nil()")
---
- null
...
conn:call_16("return_nil")
---
- - [null]
...
function return_nils() return nil, nil, nil end
---
...
conn:call("return_nils")
---
- null
- null
- null
...
conn:eval("return return_nils()")
---
- null
- null
- null
...
conn:call_16("return_nils")
---
- - [null]
  - [null]
  - [null]
...
function return_bool() return true end
---
...
conn:call("return_bool")
---
- true
...
conn:eval("return return_bool()")
---
- true
...
conn:call_16("return_bool")
---
- - [true]
...
function return_bools() return true, false, true end
---
...
conn:call("return_bools")
---
- true
- false
- true
...
conn:eval("return return_bools()")
---
- true
- false
- true
...
conn:call_16("return_bools")
---
- - [true]
  - [false]
  - [true]
...
function return_number() return 1 end
---
...
conn:call("return_number")
---
- 1
...
conn:eval("return return_number()")
---
- 1
...
conn:call_16("return_number")
---
- - [1]
...
function return_numbers() return 1, 2, 3 end
---
...
conn:call("return_numbers")
---
- 1
- 2
- 3
...
conn:eval("return return_numbers()")
---
- 1
- 2
- 3
...
conn:call_16("return_numbers")
---
- - [1]
  - [2]
  - [3]
...
function return_string() return "string" end
---
...
conn:call("return_string")
---
- string
...
conn:eval("return return_string()")
---
- string
...
conn:call_16("return_string")
---
- - ['string']
...
function return_strings() return "a", "b", "c" end
---
...
conn:call("return_strings")
---
- a
- b
- c
...
conn:eval("return return_strings()")
---
- a
- b
- c
...
conn:call_16("return_strings")
---
- - ['a']
  - ['b']
  - ['c']
...
function return_emptytuple() return box.tuple.new() end
---
...
conn:call("return_emptytuple")
---
- []
...
conn:eval("return return_emptytuple()")
---
- []
...
conn:call_16("return_emptytuple")
---
- - []
...
function return_tuple() return box.tuple.new(1, 2, 3) end
---
...
conn:call("return_tuple")
---
- [1, 2, 3]
...
conn:eval("return return_tuple()")
---
- [1, 2, 3]
...
conn:call_16("return_tuple")
---
- - [1, 2, 3]
...
function return_tuples() return box.tuple.new(1, 2, 3), box.tuple.new(3, 4, 5)  end
---
...
conn:call("return_tuples")
---
- [1, 2, 3]
- [3, 4, 5]
...
conn:eval("return return_tuples()")
---
- [1, 2, 3]
- [3, 4, 5]
...
conn:call_16("return_tuples")
---
- - [1, 2, 3]
  - [3, 4, 5]
...
function return_map() return { k1 = 'v1', k2 = 'v2'} end
---
...
conn:call("return_map")
---
- {'k1': 'v1', 'k2': 'v2'}
...
conn:eval("return return_map()")
---
- {'k1': 'v1', 'k2': 'v2'}
...
conn:call_16("return_map")
---
- - [{'k1': 'v1', 'k2': 'v2'}]
...
function return_emptyarray() return {} end
---
...
conn:call("return_emptyarray")
---
- []
...
conn:eval("return return_emptyarray()")
---
- []
...
conn:call_16("return_emptyarray")
---
- - []
...
function return_array1() return {1} end
---
...
conn:call("return_array1")
---
- [1]
...
conn:eval("return return_array1()")
---
- [1]
...
conn:call_16("return_array1")
---
- - [1]
...
function return_array2() return {1, 2} end
---
...
conn:call("return_array2")
---
- [1, 2]
...
conn:eval("return return_array2()")
---
- [1, 2]
...
conn:call_16("return_array2")
---
- - [1, 2]
...
function return_complexarray1() return {1, 2, {k1 = 'v1', k2 = 'v2' }} end
---
...
conn:call("return_complexarray1")
---
- [1, 2, {'k1': 'v1', 'k2': 'v2'}]
...
conn:eval("return return_complexarray1()")
---
- [1, 2, {'k1': 'v1', 'k2': 'v2'}]
...
conn:call_16("return_complexarray1")
---
- - [1, 2, {'k1': 'v1', 'k2': 'v2'}]
...
function return_complexarray2() return {{k1 = 'v1', k2 = 'v2' }, 2, 3} end
---
...
conn:call("return_complexarray2")
---
- [{'k1': 'v1', 'k2': 'v2'}, 2, 3]
...
conn:eval("return return_complexarray2()")
---
- [{'k1': 'v1', 'k2': 'v2'}, 2, 3]
...
conn:call_16("return_complexarray2")
---
- - [{'k1': 'v1', 'k2': 'v2'}, 2, 3]
...
function return_complexarray3() return {1, {k1 = 'v1', k2 = 'v2' }, 3} end
---
...
conn:call("return_complexarray3")
---
- [1, {'k1': 'v1', 'k2': 'v2'}, 3]
...
conn:eval("return return_complexarray3()")
---
- [1, {'k1': 'v1', 'k2': 'v2'}, 3]
...
conn:call_16("return_complexarray3")
---
- - [1, {'k1': 'v1', 'k2': 'v2'}, 3]
...
function return_complexarray4() return {{k1 = 'v1', k2 = 'v2' }} end
---
...
conn:call("return_complexarray4")
---
- [{'k1': 'v1', 'k2': 'v2'}]
...
conn:eval("return return_complexarray4()")
---
- [{'k1': 'v1', 'k2': 'v2'}]
...
conn:call_16("return_complexarray4")
---
- - [{'k1': 'v1', 'k2': 'v2'}]
...
function return_tableofarrays1() return {{1}} end
---
...
conn:call("return_tableofarrays1")
---
- [[1]]
...
conn:eval("return return_tableofarrays1()")
---
- [[1]]
...
conn:call_16("return_tableofarrays1")
---
- - [1]
...
function return_tableofarrays2() return {{1, 2, 3}} end
---
...
conn:call("return_tableofarrays2")
---
- [[1, 2, 3]]
...
conn:eval("return return_tableofarrays2()")
---
- [[1, 2, 3]]
...
conn:call_16("return_tableofarrays2")
---
- - [1, 2, 3]
...
function return_tableofarrays3() return {{1}, {2}, {3}} end
---
...
conn:call("return_tableofarrays3")
---
- [[1], [2], [3]]
...
conn:eval("return return_tableofarrays3()")
---
- [[1], [2], [3]]
...
conn:call_16("return_tableofarrays3")
---
- - [1]
  - [2]
  - [3]
...
function return_tableoftuples1() return {box.tuple.new(1)} end
---
...
conn:call("return_tableoftuples1")
---
- [[1]]
...
conn:eval("return return_tableoftuples1()")
---
- [[1]]
...
conn:call_16("return_tableoftuples1")
---
- - [1]
...
function return_tableoftuples2() return {box.tuple.new(1), box.tuple.new(2)} end
---
...
conn:call("return_tableoftuples2")
---
- [[1], [2]]
...
conn:eval("return return_tableoftuples2()")
---
- [[1], [2]]
...
conn:call_16("return_tableoftuples2")
---
- - [1]
  - [2]
...
function return_indecipherable1() return {{1}, 2, 3} end
---
...
conn:call("return_indecipherable1")
---
- [[1], 2, 3]
...
conn:eval("return return_indecipherable1()")
---
- [[1], 2, 3]
...
conn:call_16("return_indecipherable1")
---
- - [1]
  - [2]
  - [3]
...
function return_indecipherable2() return {box.tuple.new(1), 2, 3} end
---
...
conn:call("return_indecipherable2")
---
- [[1], 2, 3]
...
conn:eval("return return_indecipherable2()")
---
- [[1], 2, 3]
...
conn:call_16("return_indecipherable2")
---
- - [1]
  - [2]
  - [3]
...
function return_indecipherable3() return {1, {2}, 3} end
---
...
conn:call("return_indecipherable3")
---
- [1, [2], 3]
...
conn:eval("return return_indecipherable3()")
---
- [1, [2], 3]
...
conn:call_16("return_indecipherable3")
---
- - [1, [2], 3]
...
function return_indecipherable4() return {1, box.tuple.new(2), 3} end
---
...
conn:call("return_indecipherable4")
---
- [1, [2], 3]
...
conn:eval("return return_indecipherable4()")
---
- [1, [2], 3]
...
conn:call_16("return_indecipherable4")
---
- - [1, [2], 3]
...
function toarray(x) return setmetatable(x, { __serialize = 'array' }) end
---
...
function tomap(x) return setmetatable(x, { __serialize = 'map' }) end
---
...
function return_serialize1() return toarray({ [1] = 1, [20] = 1}) end
---
...
conn:call("return_serialize1")
---
- [1, null, null, null, null, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, 1]
...
conn:eval("return return_serialize1()")
---
- [1, null, null, null, null, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, 1]
...
conn:call_16("return_serialize1")
---
- - [1, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, 1]
...
function return_serialize2() return tomap({ 'a', 'b', 'c'}) end
---
...
conn:call("return_serialize2")
---
- {1: 'a', 2: 'b', 3: 'c'}
...
conn:eval("return return_serialize2()")
---
- {1: 'a', 2: 'b', 3: 'c'}
...
conn:call_16("return_serialize2")
---
- - [{1: 'a', 2: 'b', 3: 'c'}]
...
function return_serialize3() return {'x', toarray({ [1] = 1, [20] = 1})} end
---
...
conn:call("return_serialize3")
---
- ['x', [1, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, 1]]
...
conn:eval("return return_serialize3()")
---
- ['x', [1, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, 1]]
...
conn:call_16("return_serialize3")
---
- - ['x', [1, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, 1]]
...
function return_serialize4() return {'x', tomap({ 'a', 'b', 'c'})} end
---
...
conn:call_16("return_serialize4")
---
- - ['x', {1: 'a', 2: 'b', 3: 'c'}]
...
function return_serialize5() return {toarray({ [1] = 1, [20] = 1}), 'x'} end
---
...
conn:call("return_serialize5")
---
- [[1, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, 1], 'x']
...
conn:eval("return return_serialize5()")
---
- [[1, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, 1], 'x']
...
conn:call_16("return_serialize5")
---
- - [1, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, 1]
  - ['x']
...
function return_serialize6() return { tomap({ 'a', 'b', 'c'}), 'x'} end
---
...
conn:call("return_serialize6")
---
- [{1: 'a', 2: 'b', 3: 'c'}, 'x']
...
conn:eval("return return_serialize6()")
---
- [{1: 'a', 2: 'b', 3: 'c'}, 'x']
...
conn:call_16("return_serialize6")
---
- - [{1: 'a', 2: 'b', 3: 'c'}, 'x']
...
function return_serialize7() return {toarray({ [1] = 1, [20] = 1})} end
---
...
conn:call("return_serialize7")
---
- [[1, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, 1]]
...
conn:eval("return return_serialize7()")
---
- [[1, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, 1]]
...
conn:call_16("return_serialize7")
---
- - [1, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, 1]
...
function return_serialize8() return { tomap({ 'a', 'b', 'c'})} end
---
...
conn:call("return_serialize8")
---
- [{1: 'a', 2: 'b', 3: 'c'}]
...
conn:eval("return return_serialize8()")
---
- [{1: 'a', 2: 'b', 3: 'c'}]
...
conn:call_16("return_serialize8")
---
- - [{1: 'a', 2: 'b', 3: 'c'}]
...
--
-- gh-1167
--
sparse_safe = require('msgpack').cfg.encode_sparse_safe
---
...
sparse_safe
---
- 10
...
function return_sparse1() local res = {} res[1] = 1 res[20] = 1 return res end
---
...
conn:call("return_sparse1")
---
- {20: 1, 1: 1}
...
conn:eval("return return_sparse1()")
---
- {20: 1, 1: 1}
...
conn:call_16("return_sparse1")
---
- - [{20: 1, 1: 1}]
...
function return_sparse2() return { [1] = 1, [20] = 1} end
---
...
conn:call("return_sparse2")
---
- {20: 1, 1: 1}
...
conn:eval("return return_sparse2()")
---
- {20: 1, 1: 1}
...
conn:call_16("return_sparse2")
---
- - [{20: 1, 1: 1}]
...
function return_sparse3() local res = {} res[5] = 5 res[20] = 1 return res end
---
...
conn:call("return_sparse3")
---
- {5: 5, 20: 1}
...
conn:eval("return return_sparse3()")
---
- {5: 5, 20: 1}
...
conn:call_16("return_sparse3")
---
- - [{5: 5, 20: 1}]
...
function return_sparse4() return { [5] = 1, [20] = 1} end
---
...
conn:call("return_sparse4")
---
- {5: 1, 20: 1}
...
conn:eval("return return_sparse4()")
---
- {5: 1, 20: 1}
...
conn:call_16("return_sparse4")
---
- - [{5: 1, 20: 1}]
...
require('msgpack').cfg { encode_sparse_safe = 50 }
---
...
conn:call("return_sparse1")
---
- [1, null, null, null, null, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, 1]
...
conn:eval("return return_sparse1()")
---
- [1, null, null, null, null, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, 1]
...
conn:call_16("return_sparse1")
---
- - [1, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, 1]
...
conn:call("return_sparse2")
---
- [1, null, null, null, null, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, 1]
...
conn:eval("return return_sparse2()")
---
- [1, null, null, null, null, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, 1]
...
conn:call_16("return_sparse2")
---
- - [1, null, null, null, null, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, 1]
...
conn:call("return_sparse3")
---
- [null, null, null, null, 5, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, 1]
...
conn:eval("return return_sparse3()")
---
- [null, null, null, null, 5, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, 1]
...
conn:call_16("return_sparse3")
---
- - [null, null, null, null, 5, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, 1]
...
conn:call("return_sparse4")
---
- [null, null, null, null, 1, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, 1]
...
conn:eval("return return_sparse4()")
---
- [null, null, null, null, 1, null, null, null, null, null, null, null, null, null,
  null, null, null, null, null, 1]
...
conn:call_16("return_sparse4")
---
- - [null, null, null, null, 1, null, null, null, null, null, null, null, null, null,
    null, null, null, null, null, 1]
...
conn:close()
---
...
require('msgpack').cfg { encode_sparse_safe = sparse_safe }
---
...
box.schema.user.revoke('guest', 'read,write,execute', 'universe')
---
...
